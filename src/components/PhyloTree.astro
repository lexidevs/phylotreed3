---
// for testing purposes only
const phyloTreeData = {
  name: "root",
  children: [
    {
      name: "child1",
      children: [{ name: "grandchild1" }, { name: "grandchild2" }],
    },
    {
      name: "child2",
      children: [{ name: "grandchild3" }, { name: "grandchild4" }],
    },
  ],
};
---

<script>
  import * as d3 from "d3";

  function renderTree(data, container) {
    // use getBoundingClientRect to get the width and height of the container

    // Check if the container exists
    if (!container) {
      console.error("Container not found");
      return;
    }

    // Set the dimensions and margins of the graph
    const width = container.getClientRects()[0].width;
    const height = container.getClientRects()[0].height;

    // use d3.hierarchy to create a root node from the data
    const root = d3.hierarchy(data);
    root.sort((a, b) => d3.ascending(a.data.name, b.data.name));
    // Set the dimensions of the tree
    const dx = height / ((root.count().value ?? 1) + 1); // vertical spacing
    const dy = width / (root.height + 1); // horizontal spacing

    // create the tree (cluster) layout
    const tree = d3.cluster().nodeSize([dx, dy]);

    // Generate the tree
    tree(root);

    // Compute the extent of the tree. (x and y are swapped here)

    let x0 = Infinity;
    let x1 = -x0;
    root.each((d) => {
      if (d.x > x1) x1 = d.x;
      if (d.x < x0) x0 = d.x;
    });

    // Compute the adjusted height of the tree.
    const adjustedHeight = x1 - x0 + dx * 2;
    const adjustedWidth = width;

    // Create an SVG element
    const svg = d3
      .select(container)
      .append("svg")
      .attr("viewBox", [-dy / 3, x0 - dx, adjustedWidth, adjustedHeight])
      .attr(
        "style",
        "font: 10px sans-serif;  overflow: visible; display: block; margin: 0 auto;"
      );

    const link = svg
      .append("g")
      .attr("fill", "none")
      .attr("stroke", "#555")
      .attr("stroke-opacity", 0.4)
      .attr("stroke-width", 1.5)
      .attr("class", "links")
      .selectAll()
      .data(root.links())
      .join("path")
      .attr(
        "d",
        d3
          .linkHorizontal()
          .x((d) => d.y)
          .y((d) => d.x)
      );

    const node = svg
      .append("g")
      .attr("stroke-linejoin", "round")
      .attr("stroke-width", 3)
      .selectAll()
      .data(root.descendants())
      .join("g")
      .attr("transform", (d) => `translate(${d.y},${d.x})`);

    node
      .append("circle")
      .attr("fill", (d) => (d.children ? "#555" : "#999"))
      .attr("r", 2.5);
    node
      .append("text")
      .attr("dy", "0.35em")
      .attr("x", (d) => (d.children ? 6 : -6))
      .attr("text-anchor", (d) => (d.children ? "start" : "end"))
      .text((d) => d.data.name)
      .clone(true)
      .lower()
      .attr("stroke-width", 3)
      .attr("stroke", "white");

    // Add a title to the SVG
    svg
      .append("text")
      .attr("x", adjustedWidth / 2)
      .attr("y", 20)
      .attr("text-anchor", "middle")
      .attr("font-size", "16px")
      .attr("font-weight", "bold")
      .text("Phylogenetic Tree");

    // Add a description to the SVG
    svg
      .append("text")
      .attr("x", adjustedWidth / 2)
      .attr("y", 40)
      .attr("text-anchor", "middle")
      .attr("font-size", "12px")
      .text("This is a phylogenetic tree generated using D3.js");

  }

  class PhyloTree extends HTMLElement {
    constructor() {
      super();
      const shadow = this.attachShadow({ mode: "open" });

      // Create a container for the tree
      const container = document.createElement("div");
      container.setAttribute("id", "phylogenetic-tree");
      container.style.width = "100%";
      container.style.height = "100%";
      shadow.appendChild(container);
    }

    connectedCallback() {
      const data = this.getAttribute("data-object");
      if (data) {
        const parsedData = JSON.parse(data);
        const container = this.shadowRoot?.getElementById("phylogenetic-tree");
        renderTree(parsedData, container);
      }
    }
  }

  customElements.define("phylo-tree", PhyloTree);
</script>

<phylo-tree
  id="phylo-tree"
  data-object={JSON.stringify(phyloTreeData)}
  style="width: 100%; height: 100%; display: block;"></phylo-tree>
